// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`holon-map-state-and-dispatch-to-props-test it should add prop function tests.: it should add prop function tests. 1`] = `
"
describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange'
    }));
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange',
      nonExistingAction: expect.any(Function),
      nonExistingActionValue: 'nonExistingActionValue-initial-value'
    }));
  });
});
"
`;

exports[`holon-map-state-and-dispatch-to-props-test it should add prop tests.: it should add prop tests. 1`] = `
"
describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange'
    }));
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange',
      nonExistingProp: 'nonExistingProp-initial-value'
    }));
  });
});
"
`;

exports[`holon-map-state-and-dispatch-to-props-test it should complete prop function tests.: it should complete prop function tests. 1`] = `
"
describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange'
    }));
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange',
      nonExistingAction: expect.any(Function),
      nonExistingActionValue: 'nonExistingActionValue-initial-value',
      existingActionValue: 'existingActionValue-initial-value'
    }));
  });
});
"
`;

exports[`holon-map-state-and-dispatch-to-props-test it should complete prop tests.: it should complete prop tests. 1`] = `
"
describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange'
    }));
  });
});

      ↓ ↓ ↓ ↓ ↓ ↓

describe('', () => {
  it('maps state and dispatch to props', () => {
    const wrapper = shallow(<Component store={store} />, {
      dive: true
    });

    // 
    expect(wrapper.props()).toEqual(expect.objectContaining({
      existingAction: 'existingActionValue',
      existingProp: 'existingPropShouldNotChange',
      nonExistingProp: 'nonExistingProp-initial-value'
    }));
  });
});
"
`;
